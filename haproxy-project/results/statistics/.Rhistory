install.packages("tidyverse")
install.packages("ggplot2")
install.packages("dplyr")
q()
update.packages(ask = FALSE, checkBuilt = TRUE)
q()
install.package("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
q()
install.packages("dplyr")
q()
# Load necessary libraries
library(dplyr)
# Step 1: Read the log file
logs <- readLines("./results/90-percent/logs.txt")
# Load necessary libraries
library(dplyr)
library(boot)
setwd("/home/luiz/estudos/ufcg/tcc/projeto-lsd/cache-resizer/haproxy-project")
# Step 1: Read the log file
logs <- readLines("./results/90-percent/logs.txt")
# Load necessary libraries
library(dplyr)
library(boot)
setwd("/home/luiz/estudos/ufcg/tcc/projeto-lsd/cache-resizer/haproxy-project")
# Step 1: Read the log file
logs <- readLines("./results/90-percent/logs.txt")
# Step 2: Extract data from logs using regex
extract_data <- function(log_line) {
parts <- strsplit(log_line, ",")[[1]]
id <- as.numeric(gsub("Id=", "", parts[1]))
start_date <- as.POSIXct(gsub("start_date=", "", parts[2]), format="%Y-%m-%d %H:%M:%OS")
total_time <- as.numeric(gsub("totalTime=", "", parts[3]))
data.frame(Id = id, StartDate = start_date, TotalTime = total_time)
}
# Step 3: Convert all logs to a data frame
log_data <- do.call(rbind, lapply(logs, extract_data))
# Step 4: Identify the start of new intervals (when Id=2)
log_data <- log_data %>%
mutate(IsNewInterval = ifelse(Id == 2, TRUE, FALSE))  # Mark intervals where Id=2
# Step 5: Create an interval ID to group data by each new interval
log_data <- log_data %>%
mutate(IntervalID = cumsum(IsNewInterval))
# Bootstrap function to calculate mean
bootstrap_mean <- function(data, indices) {
d <- data[indices]  # Allows boot to select sample
return(mean(d))
}
# Step 6: Calculate 95% bootstrap confidence intervals for each interval
calculate_bootstrap_ci <- function(data, n_bootstrap = 1000, conf_level = 0.95) {
# Bootstrapping the TotalTime (latency) data
bootstrap_results <- boot(data$TotalTime, bootstrap_mean, R = n_bootstrap)
# Getting the confidence interval using the bootstrap percentile method
ci <- boot.ci(bootstrap_results, type = "perc", conf = conf_level)
return(c(ci$perc[4], ci$perc[5]))  # Return lower and upper bounds of CI
}
# Step 7: Apply bootstrap CI calculation for each interval
results <- log_data %>%
group_by(IntervalID) %>%
summarise(
IntervalStart = min(StartDate),
IntervalEnd = max(StartDate),
AvgLatency = mean(TotalTime),
CI_Lower = calculate_bootstrap_ci(cur_data())[1],
CI_Upper = calculate_bootstrap_ci(cur_data())[2]
)
# Step 8: Print the results
print(results)
# Optionally save the results to a CSV file
write.csv(results, "bootstrap_confidence_intervals_latency.csv", row.names = FALSE)
View(log_data)
